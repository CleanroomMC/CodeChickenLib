buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

group = "codechicken" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CodeChickenLib"

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${project.config.mod_version}." + (System.getenv("BUILD_NUMBER") ?: "400")

sourceSets.main.resources { srcDir 'src/generated/resources' }
println config.mc_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {

    mappings channel: 'snapshot', version: '20171003-1.12'

    accessTransformer = file('src/main/resources/ccl_at.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2860"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version
    inputs.property "mc_version", project.config.mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mc_version': project.config.mc_version
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

version = "1.12.2-${project.version}"
def commonManifest = {
    attributes 'FMLAT': 'ccl_at.cfg'
}

jar {
    archiveClassifier = 'universal'
    manifest commonManifest
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier = 'deobf'
    manifest commonManifest
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
    archives deobfJar
    archives srcJar
}

